{"version":3,"sources":["components/Card.js","serviceWorker.js","robots.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Card","name","email","id","className","alt","src","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","robots","username","CardList","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","fetch","response","json","users","filteredRobots","this","filter","toLowerCase","includes","lenght","Component","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","message"],"mappings":"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","file":"static/js/main.bdaa8f98.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email,id }) => {\r\n    // const {name, email,id} = props;\r\n    return (\r\n    \r\n    <div className =\"bg-blue dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n        <img alt = \"Robots\" src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>   \r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Card","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const robots = [\r\n    {\r\n      id: 1,\r\n      name: 'Leanne Graham',\r\n      username: 'Bret',\r\n      email: 'Sincere@april.biz'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Ervin Howell',\r\n      username: 'Antonette',\r\n      email: 'Shanna@melissa.tv'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Clementine Bauch',\r\n      username: 'Samantha',\r\n      email: 'Nathan@yesenia.net'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Patricia Lebsack',\r\n      username: 'Karianne',\r\n      email: 'Julianne.OConner@kory.org'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Chelsey Dietrich',\r\n      username: 'Kamren',\r\n      email: 'Lucio_Hettinger@annie.ca'\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'Mrs. Dennis Schulist',\r\n      username: 'Leopoldo_Corkery',\r\n      email: 'Karley_Dach@jasper.info'\r\n    },\r\n    {\r\n      id: 7,\r\n      name: 'Kurtis Weissnat',\r\n      username: 'Elwyn.Skiles',\r\n      email: 'Telly.Hoeger@billy.biz'\r\n    },\r\n    {\r\n      id: 8,\r\n      name: 'Nicholas Runolfsdottir V',\r\n      username: 'Maxime_Nienow',\r\n      email: 'Sherwood@rosamond.me'\r\n    },\r\n    {\r\n      id: 9,\r\n      name: 'Glenna Reichert',\r\n      username: 'Delphine',\r\n      email: 'Chaim_McDermott@dana.io'\r\n    },\r\n    {\r\n      id: 10,\r\n      name: 'Clementina DuBuque',\r\n      username: 'Moriah.Stanton',\r\n      email: 'Rey.Padberg@karina.biz'\r\n    }\r\n  ];\r\n  ","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({robots}) =>{\r\n    \r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((user,i)=>{\r\n                    return (  \r\n                    <Card  \r\n                    key={i} \r\n                    id={robots[i].id} \r\n                    name ={robots[i].name} \r\n                    email= {robots[i].email}\r\n                    />\r\n                      )\r\n                })\r\n            \r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList","import React from 'react'\r\n\r\nconst SearchBox = ({searchfield,searchChange}) =>{\r\n    return(\r\n        <div className='pa2'>\r\n            <input className = \"pa3 ba b--green bg-lightest-blue\"\r\n            type= \"serach\" \r\n            placeholder = \"serch robots\"\r\n            onChange={searchChange}\r\n            />\r\n            \r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default SearchBox;","import React  from 'react';\r\n    const Scroll = (props) => {\r\n        return (\r\n            <div style={{overflowY: 'scroll',border: '5px solid black', height: '800px'}}>\r\n                {props.children}\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList  from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox'\r\nimport {robots} from '../robots'\r\nimport Scroll from '../components/Scroll'\r\n\r\n\r\nclass App extends Component {\r\n\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: robots,\r\n            searchfield: \"\"\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response =>   response.json())\r\n        .then(users => {this.setState({robots: users})})\r\n    }\r\n    onSearchChange = (event) =>{\r\n        this.setState({searchfield: event.target.value})\r\n       \r\n        // const filteredRobots = this.state.robots.filter(robots =>{\r\n        //     return ( robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase))\r\n        // })\r\n        \r\n    }\r\n    render() {\r\n        const filteredRobots = this.state.robots.filter(robots =>{\r\n            return ( robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase()))\r\n        })\r\n        if(this.state.robots.lenght === 0){\r\n            return <h1>Loading</h1>\r\n        }\r\n        else{\r\n                    return(\r\n                <div className = 'tc'>\r\n\r\n                    <h1 className = \"f1\">RoboFriedns</h1>\r\n            \r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </Scroll>\r\n                </div>\r\n            ) \r\n        }\r\n       \r\n    }\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Card from './components/Card.js';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport {robots} from './robots';\nimport App from './containers/App'\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\nserviceWorker.register();\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}